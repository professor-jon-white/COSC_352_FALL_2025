[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 17.0.2)
[debug] Load.defaultLoad until apply took 827.908149ms
[debug]           Load.loadUnit: plugins took 106.72424ms
[debug]           Load.loadUnit: defsScala took 0.215822ms
[debug] [Loading] Scanning directory /app/project
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /app/project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 41.394156 ms
[debug]               Load.resolveProject(app-build) took 78.947505ms
[debug]             Load.loadTransitive: finalizeProject(Project(id app-build, base: /app/project, plugins: List(<none>))) took 165.524637ms
[debug] [Loading] Done in /app/project, returning: (app-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 213.534349ms
[debug]           Load.loadUnit: cleanEvalClasses took 0.225751ms
[debug]         Load.loadUnit(file:/app/project/, ...) took 328.900355ms
[debug]       Load.apply: load took 624.817116ms
[debug]       Load.apply: resolveProjects took 5.849155ms
[debug]       Load.apply: finalTransforms took 119.397619ms
[debug]       Load.apply: config.delegates took 6.890368ms
[debug]       Load.apply: Def.make(settings)... took 600.39831ms
[debug]       Load.apply: structureIndex took 157.955864ms
[debug]       Load.apply: mkStreams took 1.379614ms
[info] loading project definition from /app/project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2652.228563ms
[debug]     Load.loadUnit: defsScala took 0.006262ms
[debug] [Loading] Scanning directory /app
[debug]       Load.loadUnit: mkEval took 3.504587ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /app, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 5.153637 ms
[info] loading settings for project app from build.sbt ...
[debug]         Load.resolveProject(app) took 2.525653ms
[debug]       Load.loadTransitive: finalizeProject(Project(id app, base: /app, plugins: List(<none>))) took 8.701107ms
[debug] [Loading] Done in /app, returning: (app)
[debug]     Load.loadUnit: loadedProjectsRaw took 138.386779ms
[debug]     Load.loadUnit: cleanEvalClasses took 3.373104ms
[debug]   Load.loadUnit(file:/app/, ...) took 2795.940729ms
[debug] Load.apply: load took 2815.600106ms
[debug] Load.apply: resolveProjects took 0.149489ms
[debug] Load.apply: finalTransforms took 12.110339ms
[debug] Load.apply: config.delegates took 0.422328ms
[debug] Load.apply: Def.make(settings)... took 247.159494ms
[debug] Load.apply: structureIndex took 44.008094ms
[debug] Load.apply: mkStreams took 0.003406ms
[info] set current project to BmoreHomicideStats (in build file:/app/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(shell, None, None)
[info] sbt server started at local:///root/.sbt/1.0/server/4b695e5f5d8c757de8fc/sock
[debug] Writing bsp connection file
[info] started sbt server
[debug] Forcing garbage collection...
